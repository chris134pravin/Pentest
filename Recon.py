import argparse, os, re, sys, socket
from subprocess import PIPE, Popen
from urlparse import urlparse

__author__ = 'Caleb Kinney'


def get_args():
    parser = argparse.ArgumentParser(
        description='Recon Scanner')
    parser.add_argument(
        '-i', '--ip', type=str, help='IP Address', required=True)
    args = parser.parse_args()
    ip = args.ip
    return ip

ip = get_args()

newpath = r'Output/Recon'
newpath2 = r'Output/Recon/%s' % ip
if not os.path.exists(newpath):
    os.makedirs(newpath)
if not os.path.exists(newpath2):
    os.makedirs(newpath2)

print("\n")
print("\033[92m")
print("______                     ")
print("| ___ \                    ")
print("| |_/ /___  ___ ___  _ __  ")
print("|    // _ \/ __/ _ \| '_ \ ")
print("| |\ \  __/ (_| (_) | | | |")
print("\_| \_\___|\___\___/|_| |_|")
print(" Version 0.5 - 10-28-2016")

o = urlparse(ip)
ipNoSpace = ip.replace(".", "")
ipNoSpace2 = ipNoSpace.replace(",", "")
ipNoSpace3 = ipNoSpace2.replace("-", "")
ipNoSpace4 = ipNoSpace3.replace("/", "")
if ipNoSpace4.isdigit() == True:
    ip = ip.replace(',',' ')
elif (o.hostname != None):
    o = urlparse(ip)
    ip = (socket.gethostbyname(o.hostname))
    print("\033[1;37m\nHostname: [ %s ]") % (o.hostname)
else:
    sys.exit("\nERROR: Please run recon script with full URL or IP Address. "
        "\nUsage:-i [http://www.example.com] or -i [192.168.0.1] ")

print "\033[1;37m\nScanning IP Address(es): [ %s ]" % ip


def cmdline(command):
    process = Popen(
        args=command,
        stdout=PIPE,
        shell=True
    )
    return process.communicate()[0]


def nmapHostDiscover():
    nmapHostScan = ("nmap -sP %s | grep 'Nmap scan report for' | cut -f 5 -d ' ' | awk -vORS=, '{ print $1 }'") % ip
    global openHosts
    openHosts = cmdline(nmapHostScan)
    openHosts = openHosts[:-1]
    print(("\n\033[1;31mDiscovered Hosts for %s: \033[1;37m" + openHosts) % ip)


def hostsScan():
    for host in openHosts.split(','):
        print("\n\033[1;31mScanning: \033[1;37m" + host)
        nmapOpenPorts100(host)
        nmapOpenPorts1000(host)


def nmapOpenPorts100(hosts):
    nmapsSPortScan = ("nmap -sTU --top-ports 100 %s | grep open | awk -vORS=, '{ print $1 }' | sed 's/,$//' | grep -o '[0-9]*' | awk -vORS=, '{ print $1 }'") % (hosts)
    global openPorts
    openPorts = cmdline(nmapsSPortScan)
    if len(str(openPorts)) >= 1:
        openPorts = openPorts[:-1]
        print(("\n\033[1;31mOpen ports for %s are: \033[1;37m" + openPorts) % hosts)
        nmapPortEnum(openPorts, hosts)
        nmapDeepScan(openPorts, hosts)
    else:
        print(("\n\033[1;31mNo open ports for %s") % hosts)


def nmapOpenPorts1000(hosts):
    nmapsSPortScan = ("nmap -sTU --top-ports 1000 %s | grep open | awk -vORS=, '{ print $1 }' | sed 's/,$//' | grep -o '[0-9]*' | awk -vORS=, '{ print $1 }'") % (hosts)
    global openPorts
    openPorts = cmdline(nmapsSPortScan)
    if len(str(openPorts)) >= 1:
        openPorts = openPorts[:-1]
        print(("\n\033[1;31mOpen ports for %s are: \033[1;37m" + openPorts) % hosts)
        nmapDeepScan(openPorts, hosts)
    else:
        print(("\n\033[1;31mNo open ports for %s") % hosts)
    print("\n\033[92mRecon Script Complete for " + hosts + "- output saved as /Output/Recon/" + hosts + ".nmap \n\033[1;37m")


def nmapPortEnum(openports, hosts):
    if "445" in openports:
        portCmd = ("nmap --script=smb-enum-shares.nse -p 445 " + hosts + " -oN Output/Recon/" + ip + "/" + hosts + "_smb_results.txt")
        print("\n\033[1;31mRunning command: \033[1;37m" + portCmd)
        os.system(portCmd)
    if "161" in openports:
        portCmd = ("nmap -sT -p 161 " + hosts + " -oN Output/Recon/" + ip + "/" + hosts + "_snmp_results.txt")
        print("\n\033[1;31mRunning command: \033[1;37m" + portCmd)
        os.system(portCmd)
    if "80" in openports:
        portCmd = ("nikto -C all -h http://" + hosts + ":80/")
        print("\n\033[1;31mRunning command: \033[1;37m" + portCmd)
        os.system(portCmd)
    if "8080" in openports:
        portCmd = ("nikto -C all -h http://" + hosts + ":8080/")
        print("\n\033[1;31mRunning command: \033[1;37m" + portCmd)
        os.system(portCmd)
    if "443" in openports:
        portCmd = ("nikto -C all -h https://" + hosts + ":443/")
        print("\n\033[1;31mRunning command: \033[1;37m" + portCmd)
        os.system(portCmd)


def nmapDeepScan(openPorts, hosts):
    nmapDeepScanCmd = ("nmap -A -T4 " + hosts + " -oN Output/Recon/" + ip + "/" + hosts + " -p " + openPorts)
    print("\n\033[1;31mRunning command: \033[1;37m" + nmapDeepScanCmd)
    os.system(nmapDeepScanCmd)

nmapHostDiscover()
hostsScan()
